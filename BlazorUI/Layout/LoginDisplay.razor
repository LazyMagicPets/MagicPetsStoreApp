@namespace BlazorUI
@inject NavigationManager Navigation
@inject IOIDCService AuthService
@inject IRememberMeService RememberMe
@inject IProfileManagementService ProfileService
@inject ILzHost host

@try
{
    @if (isAuthenticated)
    {
        <MudToolBar >
            <RememberMeToggle />
            <MudText Color="Color.Inherit">Hello, @userName!</MudText>
            <MudButton Color="Color.Inherit" OnClick="async () => await BeginLogOut()">Log Out</MudButton>
        </MudToolBar>
    }
    else
    {
        <MudToolBar>
            <MudButton Color="Color.Inherit" OnClick="BeginLogIn">Log In</MudButton>
            @if (isCheckingAuthState)
            {
                <MudText Color="Color.Inherit">Checking login status...</MudText>
            }
            <MudButton Color="Color.Inherit" OnClick="HandleForgotPassword">Forgot Password?</MudButton>
        </MudToolBar>
    }
}
catch (Exception ex)
{
    <div style="color: red; font-size: 0.8em;">
        LoginDisplay Error: @ex.Message
    </div>
}

@code {
    private bool isAuthenticated = false;
    private string? userName = null;
    private bool isCheckingAuthState = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Show checking state and allow user interaction
            isCheckingAuthState = true;
            StateHasChanged();

            // Check initial authentication state (this may take 10+ seconds)
            await UpdateAuthenticationState();

            // Hide checking state
            isCheckingAuthState = false;
            StateHasChanged();

            // Subscribe to authentication changes
            AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        }
        catch (Exception ex)
        {
            // Initialization failed - authentication state will remain false
            isCheckingAuthState = false;
            StateHasChanged();
        }
    }

    private async void OnAuthenticationStateChanged(object? sender, OIDCAuthenticationStateChangedEventArgs e)
    {
        await UpdateAuthenticationState();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            var authState = await AuthService.GetAuthenticationStateAsync();
            isAuthenticated = authState.IsAuthenticated;
            userName = authState.UserName;
        }
        catch (Exception ex)
        {
            // Failed to update auth state
            isAuthenticated = false;
            userName = null;
        }
    }

    private async void BeginLogIn()
    {
        try
        {
            await AuthService.LoginAsync();
        }
        catch (Exception ex)
        {
            // Handle error silently for now
        }
    }

    private async Task BeginLogOut()
    {
        try
        {
            // Call the OIDC service logout directly
            // This handles token clearing and Cognito logout navigation
            await AuthService.LogoutAsync();
        }
        catch (Exception ex)
        {
            // Fallback to local navigation if logout fails
            Navigation.NavigateTo(host.AppPath, forceLoad: true);
        }
    }

    private async void HandleForgotPassword()
    {
        try
        {
            await ProfileService.GetPasswordResetUrlAsync();
        }
        catch (Exception ex)
        {
            // Handle error silently for now
            Console.WriteLine($"[LoginDisplay] Error during forgot password: {ex.Message}");
        }
    }

    public void Dispose()
    {
        if (AuthService != null)
        {
            AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        }
    }
}