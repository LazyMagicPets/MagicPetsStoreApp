@namespace BlazorUI
@page "/PetsPage"
@inherits LzComponentBaseAssignViewModel<PetsViewModel>
@inject ISessionsViewModel SessionsViewModel
@inject NavigationManager NavigationManager

<h3>PetsPage</h3>
@if (ViewModel!.IsLoading)
{
    <Busy />
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Default" OnClick="AddPet" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTable T="PetModel"
            Items="@ViewModel.ViewModels.Values.Select(x => x.Data)">
                <HeaderContent>
                    <MudTh>Actions</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Category</MudTh>
                    <MudTh>Tags</MudTh>

                </HeaderContent>

                <RowTemplate>
                    <mudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => EditPet(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="@(() => DeletePet(context))" />
                    </mudTd>
                    <MudTh>@context.PetStatus</MudTh>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Category">@context.Category</MudTd>
                    <MudTd DataLabel="Tags">@(string.Join(",", context.Tags ?? [""]))</MudTd>
                </RowTemplate>

            </MudTable>

        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="PetsReloadAsync">Reload</MudButton>
        </MudCardActions>
    </MudCard>
}
@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    private MudTable<PetModel> table = new MudTable<PetModel>();
    private string testString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = SessionsViewModel!.SessionViewModel!.PetsViewModel;
        ViewModel.Clear();
        var (success, msg) = await ViewModel!.ReadAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
        await base.OnInitializedAsync();
    }

    private void AddPet()
    {
        ViewModel!.EditViewModel = null; // ensure a new PetViewModel is created
        NavigationManager.NavigateTo("PetEditPage");
    }

    private void EditPet(PetModel petModel)
    {
        var viewModel = ViewModel!.CurrentViewModel = ViewModel!.EditViewModel = ViewModel.ViewModels[petModel.Id];
        NavigationManager.NavigateTo("PetEditPage");
    }

    private async Task DeletePet(PetModel petModel)
    {
        var viewModel = ViewModel!.ViewModels[petModel.Id];
        var (success, msg) = await viewModel.DeleteAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }

    private async Task PetsReloadAsync()
    {
        var (success, msg) = await ViewModel!.ReadAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }
}
