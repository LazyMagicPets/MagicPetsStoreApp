@namespace BlazorUI
@page "/PetsPage"
@inherits LzComponentBaseAssignViewModel<PetsViewModel>
@inject ISessionViewModel SessionViewModel
@inject NavigationManager NavigationManager
@inject IConnectivityService ConnectivityService

<h3>PetsPage</h3>
@if (ViewModel!.IsLoading)
{
    <Busy />
}
else
{
    @if (ConnectivityService.IsOnline)
    {
        <PetsList ViewModel="@ViewModel"
                  OnAddPet="AddPet"
                  OnEditPet="EditPet"
                  OnDeletePet="DeletePet"
                  OnPetsReload="PetsReload" />
    }
}
@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    private MudTable<PetModel> table = new MudTable<PetModel>();
    private string testString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = SessionViewModel!.PetsViewModel;
        ViewModel.Clear();
        var (success, msg) = await ViewModel!.ReadAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
        await base.OnInitializedAsync();
    }

    private void AddPet()
    {
        ViewModel!.EditViewModel = null; // ensure a new PetViewModel is created
        NavigationManager.NavigateTo("PetEditPage");
    }

    private void EditPet(PetModel petModel)
    {
        var viewModel = ViewModel!.CurrentViewModel = ViewModel!.EditViewModel = ViewModel.ViewModels[petModel.Id];
        NavigationManager.NavigateTo("PetEditPage");
    }

    private async Task DeletePet(PetModel petModel)
    {
        var viewModel = ViewModel!.ViewModels[petModel.Id];
        var (success, msg) = await viewModel.DeleteAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }

    private async Task PetsReload()
    {
        var (success, msg) = await ViewModel!.ReadAsync();
        if (!success)
        {
            Snackbar!.Add(msg, MudBlazor.Severity.Error);
        }
    }
}
