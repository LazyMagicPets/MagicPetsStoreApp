@namespace BlazorUI
@inject IJSRuntime JSRuntime
@inject ILzHost Host
@inject IStaticAssets staticAssets
@inject HttpClient HttpClient
@inject ILzClientConfig ClientConfig
@inject IOSAccess OSAccess
@inject IBlazorInternetConnectivity InternetConnectivity
@inject ILzMessages Messages
@inject IBaseAppJS BaseAppJS    
@inject NavigationManager NavigationManager
@inject ISessionsViewModel SessionsViewModel

@if(ClientConfig.Configured)
{
    <Router AppAssembly="@typeof(Main).Assembly">
        <Found Context="routeData">
            @if (ClientConfig.Configured)
            {
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            }
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address. @NavigationManager.Uri</p>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <p>Loading Config</p>
}   

@code {
    private string tenancyHostUrl = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        if(!ClientConfig.Configured)
        {
            try
            {
                // We initialize the following because the DI container doens't have access
                // to the JSRuntime until the first render in MAUI.
                InternetConnectivity.SetJSRuntime(JSRuntime);
                await InternetConnectivity.CheckInternetConnectivityAsync();
                Messages.SetStaticAssets(staticAssets);
                BaseAppJS.SetJSRuntime(JSRuntime);
                await BaseAppJS.Initialize();
                await ClientConfig.InitializeAsync(Host.AssetsUrl);

                try
                {
                    // Read message files and set the default 
                    Messages
                        .AddBlazorUIMessages();
                    Messages.AssetsUrl = Host.AssetsUrl;
                    await Messages.SetMessageSetAsync("en-US", LzMessageUnits.Imperial);
                } catch (Exception ex)
                {
                    Console.WriteLine($"Messages.SetMessageSetAsync failed. {ex.Message} ");
                } 
                
                Console.WriteLine("NavigationManager.BaseUri: " + NavigationManager.BaseUri);

                //NavigationManager.NavigateTo("/");

            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}
